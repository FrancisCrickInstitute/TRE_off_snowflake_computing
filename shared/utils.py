import flows.cli
import secrets
import string
import snowflake.connector
import re

from jinja2 import Environment, PackageLoader, select_autoescape


def template_to_yaml(json_values: dict, template_name: str, password: str = None):
    """
    Populates jinja template with values, and converts it to yaml config file for flows.

    Args:
        json_values(dict): values to be passed into template
        template_name(str): jinja template, which is transformed to yaml file
        password(str): generated by `generate_password` function from this module
    """
    env = Environment(
        loader=PackageLoader("packages"),
        autoescape=select_autoescape()
    )

    # CREDITS_ needs to be ints, not floats,
    # NAME_OF_BODY needs to be capitalized, without spaces
    for key, value in json_values.items():
        if "CREDITS_" in key:
            json_values[key] = int(float(value))
        if "NAME_OF_BODY" == key:
            json_values[key] = re.sub(r"\s+", '_', value).upper()

    if password:
        json_values['PASSWORD'] = password

    template = env.get_template('{}.j2'.format(template_name))
    output = template.render(json_values)
    with open('/tmp/{}.yml'.format(template_name), "w") as yml:
        yml.write(output)
    return json_values


def apply(template: str, sf_account: str, sf_username: str, sf_password: str, revert: bool = False,
          tasks_dir: str = "packages/tasks"):
    """
    Login to snowflake and apply flows configuration (yaml file that was generated by `template_to_yaml` method)

    Args:
    template(str): name of the template, e.g. 08_new_user.yaml
    sf_account(str): snowflake account name
    sf_username(str): snowflake user with accountadmin role
    sf_password(str): password for snowflake user
    revert(bool): if True, applies reverse process, e.g. 08_new_user.yaml will remove user
    tasks_dir(str): path to directory with tasks definitions, defaults to "packages/tasks"
    """
    flows.cli.login(account=sf_account, user=sf_username, password=sf_password, auth="snowflake", target=sf_account)
    flows.cli.apply(flow="/tmp/{}.yml".format(template), tasks=(), var=(), revert=revert, debug=False, var_file=None,
                    tasks_dir=tasks_dir, target=sf_account)


def generate_password(length: int, letters_only: bool = False) -> str:
    """
    Generate string of letters and digits. It contains at least one letter, and one digit.

    Args:
        length(int): number of characters in the password.
        letters_only(bool): if True, password contains no digit, only letters.

    Returns:
        The generated string.
    """
    if letters_only:
        return ''.join(secrets.choice(string.ascii_letters) for _ in range(length))
    else:
        alphabet = string.ascii_letters + string.digits

        # always at least one letter and one digit
        return ''.join(secrets.choice(alphabet) for _ in range(length - 2)) + secrets.choice(
            string.ascii_letters) + secrets.choice(string.digits)


def add_locator(json_input: dict, user: str, password: str, account: str) -> dict:
    """
    Connects to snowflake account, obtain its `account locator`, and add the locator into json_input.

    Args:
        json_input(dict): Input from ServiceNow
        user(str): Snowflake user with accountadmin role.
        password(str): Password for Snowflake user.
        account(str): Snowflake account name.

    Returns:
        Updated `json_input`.
    """
    ctx = snowflake.connector.connect(
        user=user,
        password=password,
        account=account
    )

    cs = ctx.cursor()
    command = "select current_account();"
    try:
        cs.execute(command)
        locator = cs.fetchone()[0]
        json_input['SUB_ACC_LOCATOR'] = locator
    finally:
        cs.close()
        ctx.close()
        return json_input
