use role {{ role_name }};
use database {{ db_name }};
use schema {{ schemata }};
call GRANTS_TO_USERS_LIVE_STORED_PROCEDURE();
create
or replace procedure {{ db_name }}.{{ schemata }}.REVOKE_ALL_ROLES_FROM_USERS() returns VARCHAR -- return final create statement
language javascript EXECUTE AS CALLER as $$
    
    // build query to get all warehouses name
    var get_tables_stmt = "select GRANTEE_NAME, ROLE from {{ db_name }}.{{ schemata }}.GRANTS_TO_USERS_LIVE WHERE GRANTEE_NAME != 'ACCOUNTADMIN_MAIN' \
    AND GRANTEE_NAME not like '%_ARCHIVE%' "

    var get_tables_stmt = snowflake.createStatement({sqlText:get_tables_stmt });

    // get result set containing all table names
    var tables = get_tables_stmt.execute();

    // rows count to iterate
    var row_count = get_tables_stmt.getRowCount();
    var rows_iterated = 0; 

    // loop over result set to build statement
    while (tables.next())  {
        rows_iterated += 1;

        // we get values from the first (and only) column in the result set
        var user_name = tables.getColumnValue(1); 
        var role_name = tables.getColumnValue(2); 

        // this will obviously fail if the column count doesnt match
        var show_statement = `REVOKE ROLE "${role_name}" FROM USER "${user_name}" `;
        var show_statement = snowflake.createStatement( {sqlText: show_statement} );
        show_statement.execute();
     }
    // return status
    return "suspend all warehouse successful";
  $$;
-- Create task to schedule refresh show command tables
call REVOKE_ALL_ROLES_FROM_USERS(); 