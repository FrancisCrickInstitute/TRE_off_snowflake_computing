use role {{ role_name }};
use database {{ db_name }};
use schema {{ schemata }};
use warehouse {{ archive_wh }};
call SHOW_TABLE_RESOURCE_MONITORS_STORED_PROCEDURE();
create
or replace procedure {{ db_name }}.{{ schemata }}.ARCHIVE_ALL_RESOURCE_MONITORS_STORED_PROCEDURE() returns VARCHAR -- return final create statement
language javascript EXECUTE AS CALLER as $$
    
    // build query to get all warehouses name
    var get_tables_stmt = "select distinct \"name\" from {{ db_name }}.{{ schemata }}.RESOURCE_MONITORS"

    var get_tables_stmt = snowflake.createStatement({sqlText:get_tables_stmt });

    // get result set containing all table names
    var tables = get_tables_stmt.execute();

    // rows count to iterate
    var row_count = get_tables_stmt.getRowCount();
    var rows_iterated = 0; 

    // loop over result set to build statement
    while (tables.next())  {
        rows_iterated += 1;

        // we get values from the first (and only) column in the result set
        var resource_monitor_name = tables.getColumnValue(1); 
        if (resource_monitor_name !== '{{archive_resource_monitor}}')
        {
        // this will obviously fail if the column count doesnt match
        var show_statement = `ALTER RESOURCE MONITOR IF EXISTS "${resource_monitor_name}" set END_TIMESTAMP = '{{archive_date}}'`;
        var show_statement = snowflake.createStatement( {sqlText: show_statement} );
        show_statement.execute();
        };
     }
    // return status
    return "resource montior all set successful";
  $$;
-- Create task to schedule refresh show command tables
call ARCHIVE_ALL_RESOURCE_MONITORS_STORED_PROCEDURE(); 